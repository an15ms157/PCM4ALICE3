#include <iostream>

#include "TCanvas.h"
#include "TChain.h"
#include "TFile.h"
#include "TH2.h"
#include "TPad.h"
#include "TLegend.h"

#include "DetectorsCommonDataFormats/DetID.h"
#include "SimulationDataFormat/MCTrack.h"

//bool isStrange(MCTrack *track)
//{
//	auto motherId = track.getMotherTrackId();
//	if (motherId < 0) return false;
//	auto mTrack = (*mcTracks)[motherId];
//	int mpid = fabs(mTrack.GetPdgCode());
//	switch (mpid) {
//		case /* value */:
//	}
//}

void ana()
{
	TChain mcTree("o2sim");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve1/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve2/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve3/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve4/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve5/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve6/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve7/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve8/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve9/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve10/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve11/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve12/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve13/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve14/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve15/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve16/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve17/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve18/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve19/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve20/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve21/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve22/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve23/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve24/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve25/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve26/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve27/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve28/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve29/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve30/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve31/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve32/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve33/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve34/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve35/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve36/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve37/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve38/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve39/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve40/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve41/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve42/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve43/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve44/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve45/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve46/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve47/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve48/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve49/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve50/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve51/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve52/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve53/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve54/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve55/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve56/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve57/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve58/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve59/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve60/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve61/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve62/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve63/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve64/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve65/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve66/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve67/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve68/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve69/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve70/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve71/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve72/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve73/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve74/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve75/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve76/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve77/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve78/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve79/o2sim_Kine.root");
    mcTree.AddFile("/misc/alidata120/alice_u/marin/ALICE3/electron-pack/results/eve80/o2sim_Kine.root");
//
	mcTree.SetBranchStatus("*", 0);
	mcTree.SetBranchStatus("MCTrack*", 1);

	std::vector<o2::MCTrack> *mcTracks = nullptr;
	mcTree.SetBranchAddress("MCTrack", &mcTracks);

	const int nEvents = mcTree.GetEntries();

	const float r = 130.;
//	const float r = 15.;
    const float maxZ = 150.;
	TH2D hVertex {"hVertex", "prod. vertices of e^{+}/e^{-} with photon mother;x (cm);y (cm)", 1000, -r, r, 1000, -r, r};
	TH2D hVertexR {"hVertexR", "prod. vertices of e^{+}/e^{-} with photon mother;z (cm);r (cm)", 1000, -maxZ, maxZ, 1000, 0., r};
	TH1D hInvMass {"hInvMass", "invariant mass of e^{+}/e^{-} with photon mother;m (GeV/c);N / N_{ev}", 200, 0., 2.};
    TH1D hInvMassSame {"hInvMassSame", "invariant mass of e^{+}/e^{-} with same photon mother;m (GeV/c);N / N_{ev}", 200, 0., 2.};
    TH1D hChargedPionPt {"hChargedPionPt", "Charged pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};
    TH1D hPi0Pt {"hPi0Pt", "pi0 pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};
    TH1D hEtaPt {"hEtaPt", "eta pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};

    TH1D hPiPlusPt {"hPiPlusPt", "pi+ pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};
    TH1D hPiMinusPt {"hPiMinusPt", "pi- pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};
    TH1D hProtonPlusPt {"hProtonPlusPt", "proton pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};
    TH1D hProtonMinusPt {"hProtonMinusPt", "antiproton pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};
    TH1D hKaonPlusPt {"hKaonPlusPt", "Kaon Plus pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};
    TH1D hKaonMinusPt {"hKaonMinusPt", "Kaon Minus pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};
    TH1D hElecPlusPt {"hElecPlusPt", "Positron pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};
    TH1D hElecMinusPt {"hElecMinusPt", "Electron pT  ; p_{T}(GeV/c);N / N_{ev}", 500, 0., 10.};
          
    TH1D hPrimPhotonPt {"hPrimPhotonPt", "primary Photon pT  ;p_{T} (GeV/c);N / N_{ev}", 500, 0., 10.};
    TH1D hPhotonPt {"hPhotonPt", "reconstructed Photon pT  e^{+}/e^{-} with same photon mother;p_{T} (GeV/c);N / N_{ev}", 500, 0., 10.};
	TH1D hInvMassPrim {"hInvMassPrim", "invariant mass of primary e^{+}/e^{-}; p_{T}  (GeV/c);N / N_{ev}", 200, 0., 2.};
    TH1D hNPrimChPiP {"hNPrimChPiP", "number of primary charged pi+; N#pi+  ;N / N_{ev}", 200, -0.5, 199.5};
    TH1D hNPrimChPiM {"hNPrimChPiM", "number of primary charged pi-; N#pi-  ;N / N_{ev}", 200, -0.5, 199.5};
    TH1D hNPhotonConv{"hNPhotonConv", "number of Photon conversions; N#g  ;N / N_{ev}", 200, -0.5, 199.5};

    TH1D hLS1 {"hLS1","Like Sign spectrum of -- pairs from all particles;m_{ee} (GeV/c^{2})", 100,0,1};
	TH1D hLS2 {"hLS2","Like Sign spectrum of ++ pairs from all particles;m_{ee} (GeV/c^{2})", 100,0,1};
	TH1D hLS1prim {"hLS1prim","Like Sign spectrum of -- pairs from primary particles;m_{ee} (GeV/c^{2})", 100,0,1};
	TH1D hLS2prim {"hLS2prim","Like Sign spectrum of ++ pairs from primary particles;m_{ee} (GeV/c^{2})", 100,0,1};


	double eMass = 0.000511;
    double minPt = 0.01;
    //double maxR  = 15;
    double maxR  = 22;
//    double maxR  = 120;
	std::vector<o2::MCTrack> ep, em, ep_prim, em_prim, pip_prim, pim_prim, gamma_prim;
    
    std::vector<o2::MCTrack> pi0_prim, eta_prim;
    std::vector<o2::MCTrack> kap_prim, kam_prim, prom_prim, prop_prim;
    
    float totPiP=0;
    float totGammaConv= 0;
    float totPiM=0;

    for(int iEvent = 0; iEvent < nEvents; ++iEvent) {
		ep.clear();
		em.clear();
		ep_prim.clear();
		em_prim.clear();
        pi0_prim.clear();
        eta_prim.clear();

        pip_prim.clear();
        pim_prim.clear();
        kap_prim.clear();
        kam_prim.clear();
        prop_prim.clear();
        prom_prim.clear();
        gamma_prim.clear();
        mcTree.GetEntry(iEvent);
		int nConv = 0;
		for (const auto track : *mcTracks) {
//            if (track.GetPdgCode() == 22 ) {
//                cout<< " we have a photon, primary?::"<< track.isPrimary() <<  "  pT="<< track.GetPt()<< "   X,Y,Z=" <<
//                track.GetStartVertexCoordinatesX()<< "  " <<
//                track.GetStartVertexCoordinatesY()<< "  " <<
//                track.GetStartVertexCoordinatesZ()<< "  " << endl;
//      auto motherIdPhoton = track.getMotherTrackId();
//                if (motherIdPhoton > 0) {
//                   auto mTrackPhoton = (*mcTracks)[motherIdPhoton];
//                    cout<<"checking mother/daugther pdgcode::" << mTrackPhoton.GetPdgCode()  << "  " << track.GetPdgCode() << endl;
//                }
//            }
            //barrel
	    if (TMath::Abs(track.GetEta()) > 1.3) continue;
	//  Forward	
	    if ( (TMath::Abs(track.GetEta()) < 1.75) ||  (TMath::Abs(track.GetEta()) > 4.) )  continue;
            if (track.isPrimary()) {
                if (track.GetPdgCode() == 111 )  pi0_prim.emplace_back(track);
                if (track.GetPdgCode() == 221 )  eta_prim.emplace_back(track);

		if (track.GetPdgCode() == 211 )  pip_prim.emplace_back(track);
                if (track.GetPdgCode() == -211 ) pim_prim.emplace_back(track);
                
                if (track.GetPdgCode() == 2212 )  prop_prim.emplace_back(track);
                if (track.GetPdgCode() == -2212 ) prom_prim.emplace_back(track);

                if (track.GetPdgCode() == 321 )  kap_prim.emplace_back(track);
                if (track.GetPdgCode() == -321 ) kam_prim.emplace_back(track);

                if (track.GetPdgCode() == 22 )   gamma_prim.emplace_back(track);
                //continue;
            }
            if (TMath::Abs(track.GetPdgCode()) != 11  ) continue;
            
			if (track.GetPt() < minPt) continue;
            // AM- I am interested in conversions all the way
            if (sqrt(track.GetStartVertexCoordinatesX()*track.GetStartVertexCoordinatesX()
                     + track.GetStartVertexCoordinatesY()*track.GetStartVertexCoordinatesY())> maxR) continue;
			if (track.isPrimary()) {
				if (track.GetPdgCode() > 0) ep_prim.emplace_back(track);
				else em_prim.emplace_back(track);
				//continue;
			}
			auto motherId = track.getMotherTrackId();
			if (motherId < 0) continue;
			auto mTrack = (*mcTracks)[motherId];
            //cout<<"checking mother pdgcode, primary, Z of photon origin::" << mTrack.GetPdgCode()  << "  " << mTrack.isPrimary() << "  "<< mTrack.GetStartVertexCoordinatesZ()<< endl;
            if (mTrack.GetPdgCode() != 22) continue;
            if (!mTrack.isPrimary() ) continue;
			hVertex.Fill(track.GetStartVertexCoordinatesX(), track.GetStartVertexCoordinatesY());
			const auto r_vtx = std::sqrt(std::pow(track.GetStartVertexCoordinatesX(), 2) + std::pow(track.GetStartVertexCoordinatesY(), 2));
			hVertexR.Fill(track.GetStartVertexCoordinatesZ(), r_vtx);
			++nConv;
			if (track.GetPdgCode() == 11) ep.emplace_back(track);
			else em.emplace_back(track);
		}
        totPiP+=pip_prim.size();
        totPiM+=pim_prim.size();

        totPi0+=pi0_prim.size();
        totEta+=eta_prim.size();


        hNPrimChPiP.Fill(pip_prim.size());
        hNPrimChPiM.Fill(pim_prim.size());

        //printf("nConv / nTracks = %i / %zu\n", nConv, mcTracks->size());
        int nConvSame = 0;
        for (auto p : ep) {
			TLorentzVector vp;
			p.Get4Momentum(vp);
			for (auto e : em) {
				TLorentzVector ve;
				e.Get4Momentum(ve);
                //cout<< "mother id of e+e-::"<< p.getMotherTrackId()<< "   " << e.getMotherTrackId()<< endl;
				const float mass = (ve + vp).M();
                const float gammaPt = (ve + vp).Pt();
                hInvMass.Fill(mass);
                if (p.getMotherTrackId() ==  e.getMotherTrackId()){
                    hInvMassSame.Fill(mass);
                    hPhotonPt.Fill(gammaPt);
                    nConvSame++;
                }
			}
		}
        hNPhotonConv.Fill(nConvSame);
        totGammaConv+=nConvSame;
        for (auto pip : pip_prim) {
            TLorentzVector vpip;
            pip.Get4Momentum(vpip);
            hChargedPionPt.Fill(vpip.Pt());
            hPiPlusPt.Fill(vpip.Pt());
        }
        for (auto pim : pim_prim) {
            TLorentzVector vpim;
            pim.Get4Momentum(vpim);
            hChargedPionPt.Fill(vpim.Pt());
            hPiMinusPt.Fill(vpim.Pt());
        }

        for (auto pi0 : pi0_prim) {
            TLorentzVector vpi0;
            pi0.Get4Momentum(vpi0);
            hPi0Pt.Fill(vpi0.Pt());
        }
       for (auto eta : eta_prim) {
            TLorentzVector veta;
            eta.Get4Momentum(veta);
            hEtaPt.Fill(veta.Pt());
        }





        
        
        for (auto kap : kap_prim) {
             TLorentzVector vkap;
             kap.Get4Momentum(vkap);
             hKaonPlusPt.Fill(vkap.Pt());
         }
         for (auto kam : kam_prim) {
             TLorentzVector vkam;
             kam.Get4Momentum(vkam);
             hKaonMinusPt.Fill(vkam.Pt());
         }
         
         for (auto prop : prop_prim) {
              TLorentzVector vprop;
              prop.Get4Momentum(vprop);
              hProtonPlusPt.Fill(vprop.Pt());
         }
         for (auto prom : prom_prim) {
              TLorentzVector vprom;
              prom.Get4Momentum(vprom);
              hProtonMinusPt.Fill(vprom.Pt());
         }
          
            for (auto elp : ep_prim) {
                   TLorentzVector velp;
                   elp.Get4Momentum(velp);
                   hElecPlusPt.Fill(velp.Pt());
               }
               for (auto elm : em_prim) {
                   TLorentzVector velm;
                   elm.Get4Momentum(velm);
                   hElecMinusPt.Fill(velm.Pt());
               }
        
        
        
        for (auto gam : gamma_prim) {
            TLorentzVector gamma;
            gam.Get4Momentum(gamma);
            hPrimPhotonPt.Fill(gamma.Pt());
        }

// Loop for pi0 and eta from gamma gamma


        for (auto gam1= gamma_prim.begin(); gam1!=gamma_prim.end();++gam1   ) {
            TLorentzVector LVgam1;
	    gam1->Get4Momentum(LVgam1);
          for (auto gam2= gam1+1  gam2!= gamma_prim.end(); ++gam2 ) {
            TLorentzVector LVgam2;
            gam2->Get4Momentum(LVgam2); 
		hInvMassGG.Fill((LVgam1+LVgam2).M());
// add that the two gammas have the same mother
		hInvMassGGPi0.Fill((LVgam1+LVgam2).M());
		hInvMassGGEta.Fill((LVgam1+LVgam2).M());
        
	

          }
	}	
		for (auto p : ep_prim) {
			TLorentzVector vp;
			p.Get4Momentum(vp);
			for (auto e : em_prim) {
				TLorentzVector ve;
				e.Get4Momentum(ve);
				const float mass = (ve + vp).M();
				hInvMassPrim.Fill(mass);
			}
		}
		for (auto track1 = em.begin(); track1!=em.end(); ++track1)
		{
			TLorentzVector LV1;
			track1->Get4Momentum(LV1);
			for (auto track2 = track1+1; track2!=em.end(); ++track2)
			{
				TLorentzVector LV2;
				track2->Get4Momentum(LV2);
				hLS1.Fill((LV1+LV2).M());
			}
		}
		for (auto track1 = ep.begin(); track1!=ep.end(); ++track1)
		{
			TLorentzVector LV1;
			track1->Get4Momentum(LV1);
			for (auto track2 = track1+1; track2!=ep.end(); ++track2)
			{
				TLorentzVector LV2;
				track2->Get4Momentum(LV2);
				hLS2.Fill((LV1+LV2).M());
			}
		}

		for (auto track1 = em_prim.begin(); track1!=em_prim.end(); ++track1)
		{
			TLorentzVector LV1;
			track1->Get4Momentum(LV1);
			for (auto track2 = track1+1; track2!=em_prim.end(); ++track2)
			{
				TLorentzVector LV2;
				track2->Get4Momentum(LV2);
				hLS1prim.Fill((LV1+LV2).M());
			}
		}
		for (auto track1 = ep_prim.begin(); track1!=ep_prim.end(); ++track1)
		{
			TLorentzVector LV1;
			track1->Get4Momentum(LV1);
			for (auto track2 = track1+1; track2!=ep_prim.end(); ++track2)
			{
				TLorentzVector LV2;
				track2->Get4Momentum(LV2);
				hLS2prim.Fill((LV1+LV2).M());
			}
		}


	}

	// hLS1prim.Add(&hLS1prim);
	// FillLsHist(&hLS1,em);

	TCanvas c("c", "c", 1600, 1600);
	hVertex.Draw("colz");
	hVertex.SetStats(false);
	c.SaveAs("conv_xy.png");
	hVertexR.Draw("colz");
	hVertexR.SetStats(false);
	c.SaveAs("conv_rz.png");
    c.SetLogy();
    hChargedPionPt.SetStats(0);
    hChargedPionPt.Scale(1./nEvents);
    hChargedPionPt.Draw();
    hPhotonPt.SetStats(0);
    hPhotonPt.Scale(1./nEvents);
    hPhotonPt.SetLineColor(kRed);
    hPhotonPt.Draw("same");
    hPrimPhotonPt.Scale(1./nEvents);
    hPrimPhotonPt.Draw("same");
    TLegend pt1(0.6, 0.7, .9, .9);
    pt1.AddEntry(&hChargedPionPt,"Charged pions (#pi+)+(#pi-)");
    pt1.AddEntry(&hPhotonPt,"Photons from Conversions");
    pt1.Draw();
    c.SaveAs("photon_pt.png");
	hLS1.Scale(1./nEvents);
	hLS1.SetMarkerStyle(20);
	hLS1.SetMarkerColor(kBlack);
	hLS1.SetLineColor(kBlack);
	hLS1prim.Scale(1./nEvents);
	hLS1prim.SetMarkerStyle(20);
	hLS1prim.SetMarkerColor(kRed);
	hLS1prim.SetLineColor(kRed);
	hLS1.SetMaximum(10);
	hLS1.SetMinimum(0.001);
	c.SetLogy();
	hLS1.SetStats(0);
	hLS1.Draw();
	hLS1prim.Draw("same");
	TLegend l1(0.6, 0.7, .9, .9);
	l1.AddEntry(&hLS1,"All -- pairs (w/ conversions)");
	l1.AddEntry(&hLS1prim,"All primary -- pairs");
	l1.Draw();
	c.SaveAs("massSpectrum.png");
	c.SetLogy(kFALSE);
    c.SetLogy();
    hInvMassSame.Scale(1./nEvents);
    hInvMassSame.SetStats(kFALSE);
    hInvMassSame.SetLineColor(3);
    hInvMass.Scale(1./nEvents);
	hInvMass.SetStats(kFALSE);
	hInvMass.Draw();
    hInvMassSame.Draw("same,hist");
    hInvMassPrim.Scale(1./nEvents);
	hInvMassPrim.Draw("same");
	hInvMassPrim.SetLineColor(kRed);
	TLegend l(0.6, 0.7, .9, .9);
	l.AddEntry(&hInvMass, "conversions", "l");
	l.AddEntry(&hInvMassPrim, "primary", "l");
    l.AddEntry(&hInvMassSame, "conversions Same mother", "l");
	l.Draw();
	c.SaveAs("invMass.png");

	std::unique_ptr<TFile> f {TFile::Open("ana.root", "RECREATE")};
	f->WriteTObject(&hVertex);
    f->WriteTObject(&hVertexR);
    f->WriteTObject(&hInvMassSame);
    f->WriteTObject(&hInvMass);
    f->WriteTObject(&hInvMassPrim);
    f->WriteTObject(&hChargedPionPt);
    f->WriteTObject(&hPhotonPt);
    f->WriteTObject(&hNPrimChPiM);
    f->WriteTObject(&hNPhotonConv);
    f->WriteTObject(&hNPrimChPiP);
    f->WriteTObject(&hPrimPhotonPt);
    f->WriteTObject(&hPiPlusPt);
    f->WriteTObject(&hPi0Pt);
    f->WriteTObject(&hEtaPt);

    f->WriteTObject(&hPiMinusPt);
    f->WriteTObject(&hProtonPlusPt);
    f->WriteTObject(&hProtonMinusPt);
    f->WriteTObject(&hKaonPlusPt);
    f->WriteTObject(&hKaonMinusPt);
    f->WriteTObject(&hElecPlusPt);
    f->WriteTObject(&hElecMinusPt);
    
    
    cout<<"events, totGammaConv,totPiM, totPiP::"<<  nEvents << "  " <<totGammaConv<< "  "<< totPiM  << " " << totPiP<< endl;
}
